C51 COMPILER V9.51   OPERATION                                                             05/08/2015 10:02:48 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE OPERATION
OBJECT MODULE PLACED IN .\operation.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE ..\Library\operation.c COMPACT ROM(COMPACT) BROWSE INCD
                    -IR(..\Library) DEBUG OBJECTEXTEND PRINT(.\operation.lst) TABS(3) OBJECT(.\operation.obj)

line level    source

   1          /*-------------------------------------------------------------
   2             operation.c
   3             各类操作程序
   4          --------------------------------------------------------------*/
   5          
   6          #include "main.h"
   7          #include "port.h"
   8          
   9          #include "operation.h"
  10          #include "other.h"
  11          #include "voice.h"
  12          #include "battery.h"
  13          #include "delay.h"
  14          #include "ElecMotor.h"
  15          #include "communication.h"
  16          
  17          /*------ private variable --------------------------*/
  18          bit enable_sensor_delayEN = 0;      // 延迟使能传感器的使能，不能即时使能传感器，需要过一段时间    
  19          
  20          bit sensor_EN = 0;
  21          
  22          /*------- Public variable declarations --------------------------*/
  23          extern bit position_sensor_EN;   
  24          extern bit fell_flag;                  
  25          extern bit raised_flag;          
  26          extern tByte sensor_trigger_count;  
  27          extern tByte sensor_1ststage_count; 
  28          extern bit raised_fell_once_flag;         
  29          extern bit raised_fell_flag;              
  30          extern bit host_stolen_alarm1_EN;     
  31          extern bit host_stolen_alarm2_EN;      
  32          extern tByte host_stolen_alarm1_count;    
  33          extern tByte host_stolen_alarm2_count;    
  34          extern bit stolen_alarm_flag;             
  35          extern tWord sensor_3rdstage_time;        
  36          extern tByte sensor_3rdstage_effcount;    
  37          extern tByte sensor_3rdstage_count;       
  38          extern tWord sensor_3rdstage_interval;    
  39          extern tWord sensor_2ndstage_time;     
  40          extern tByte sensor_2ndstage_count;    
  41          extern tWord ADC_check_result;      
  42          extern tByte wire_broken_count;     
  43          extern bit wire_broken_flag;        
  44          extern bit battery_stolen_EN;       
  45          extern tByte battery_stolen_count;
  46          extern bit sensor_3rdalarm_flag;
  47          extern tByte enable_sensor_delay_count;      
  48          extern bit Silence_Flag;
  49          extern tByte key_rotated_on_flag;      
  50          extern tByte IDkey_certificated_times;
  51          extern bit IDkey_flag;        
  52          extern tByte IDkey_count;     
  53          extern bit never_alarm;
  54          extern bit IDkey_selflearn_flag1;
C51 COMPILER V9.51   OPERATION                                                             05/08/2015 10:02:48 PAGE 2   

  55          extern bit IDkey_selflearn_flag2;
  56          extern bit IDkey_selflearn_flag3;
  57          extern bit IDkey_selflearn_flag4;
  58          extern bit IDkey_selflearn_flag5;
  59          extern bit IDkey_selflearn_flag6;
  60          extern tByte IDkey_selflearn_flag6count;
  61          extern tWord IDkey_selflearn_HVcount;
  62          extern tWord IDkey_selflearn_LVcount;
  63          extern tByte fell_alarm_count;
  64          extern tByte raised_alarm_count;
  65          extern tByte Check_Motobattery_count;
  66          extern bit Check_Motobattery_flag;
  67          extern tWord load_battery_result;
  68          
  69          
  70          /*-----------------------------------------
  71             slave_away_operation()
  72             
  73             operation for slave is away
  74          ------------------------------------------*/
  75          void slave_away_operation(void)
  76             {
  77   1         ElecMotor_ACW();
  78   1         
  79   1         if(Silence_Flag == 0)
  80   1            {
  81   2            close_lock_speech(); 
  82   2            
  83   2            #ifdef Batterycheck
  84   2            Check_Motobattery_flag = 1;
  85   2            Check_Motobattery_count = 0;
  86   2      
  87   2            #endif
  88   2            }
  89   1         // enable_sensor();  
  90   1         enable_sensor_delayEN = 1;
  91   1         enable_sensor_delay_count = 0;
  92   1         // delay time, avoid sensor trigger on.
  93   1         Delay(20);
  94   1         IDkey_certificated_times = 0;
  95   1      
  96   1         if(Silence_Flag == 1)
  97   1            Silence_Flag = 0;
  98   1         }
  99          
 100          /*----------------------------------------------------------------------
 101                slave_nearby_operation()
 102                operation for slave is nearby
 103          ----------------------------------------------------------------------*/
 104          void slave_nearby_operation(void)
 105             {
 106   1          if(Silence_Flag == 0)
 107   1            {
 108   2            open_lock_speech();
 109   2            verifybattery(load_battery_result);
 110   2            
 111   2            key_rotate_on_speech();
 112   2            }
 113   1         key_rotated_on_flag = 1;
 114   1         }
 115          
 116          /*------------------------------------------------------------------
C51 COMPILER V9.51   OPERATION                                                             05/08/2015 10:02:48 PAGE 3   

 117             InitSensor()
 118             Initialise Sensor.
 119          ------------------------------------------------------------------*/
 120          void InitSensor(void)
 121             {
 122   1         sensor_EN = 0;
 123   1         position_sensor_EN = 0;
 124   1         enable_sensor_delayEN = 0; 
 125   1         raised_sensor_detect = 1;
 126   1         fell_sensor_detect = 1; 
 127   1         }
 128             
 129          /*------------------------------------------------------------------
 130             Host_stolen_action()
 131             Determine host has been triggled 3 times, alarm action.
 132          ------------------------------------------------------------------*/
 133          void Host_stolen_action(void)
 134             {
 135   1         // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 136   1         if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 137   1            {
 138   2            stolen_alarm_flag = 1;
 139   2            
 140   2            #ifdef Z3
 141   2            if(wire_broken_flag == 0)
 142   2               {
 143   3               UART_Send_Data(ComMode_3);                                                       
 144   3               }
 145   2            else
 146   2               {                                                                     
 147   3               UART_Send_Data(ComMode_6);                                                       
 148   3               }
 149   2            #endif
 150   2            
 151   2            stolen_alarm_speech1();
 152   2            if(++host_stolen_alarm1_count >= 4)
 153   2               {
 154   3               host_stolen_alarm1_count = 0;
 155   3               host_stolen_alarm1_EN = 0;
 156   3               stolen_alarm_flag = 0;
 157   3               sensor_3rdalarm_flag = 0;
 158   3               }
 159   2            }
 160   1         if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 161   1            {
 162   2            stolen_alarm_flag = 1;
 163   2            
 164   2            #ifdef Z3
 165   2            if(wire_broken_flag == 0)
 166   2               {
 167   3               UART_Send_Data(ComMode_3);                                                       
 168   3               }
 169   2            else
 170   2               {
 171   3               UART_Send_Data(ComMode_6);                                                       
 172   3               }
 173   2            #endif
 174   2            
 175   2            stolen_alarm_speech2();
 176   2            if(++host_stolen_alarm2_count >= 4)
 177   2               {
 178   3               host_stolen_alarm2_count = 0;
C51 COMPILER V9.51   OPERATION                                                             05/08/2015 10:02:48 PAGE 4   

 179   3               host_stolen_alarm2_EN = 0;
 180   3               stolen_alarm_flag = 0;
 181   3               sensor_3rdalarm_flag = 0;
 182   3               }
 183   2            }  
 184   1         }
 185          
 186          /*------------------------------------------------------------------
 187             ENsensor_afterIDcert()
 188             4s After ID certificated, enable sensor. 
 189             If ID certficated 6 times, don't enable sensor.
 190          ------------------------------------------------------------------*/
 191          void ENsensor_afterIDcert(void)
 192             {
 193   1         if(IDkey_flag == 1)
 194   1            {
 195   2            if(++IDkey_count >= 3)
 196   2               {
 197   3               IDkey_count = 0;
 198   3               IDkey_flag = 0;
 199   3               IDkey_certificated_times = 0;
 200   3               if((key_rotated_on_flag == 0)&&(never_alarm == 0))
 201   3                  {
 202   4                  enable_sensor();              
 203   4                  }           
 204   3               never_alarm = 0;
 205   3               }        
 206   2            }
 207   1         }
 208          
 209          /*------------------------------------------------------------------
 210             ENsensor_After_CloseLock()
 211          ------------------------------------------------------------------*/
 212          void ENsensor_After_CloseLock(void)
 213             {
 214   1         if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 215   1            {
 216   2            if(++enable_sensor_delay_count >= 3)
 217   2               {
 218   3               enable_sensor_delay_count = 0;
 219   3               enable_sensor_delayEN = 0;
 220   3               enable_sensor();
 221   3               }
 222   2            }  
 223   1         }
 224          
 225          /*-----------------------------------------------------------------
 226             SelfLearn_Reset()
 227             PIN26 triggles 3 times, the system enters selflearn mode
 228          ------------------------------------------------------------------*/
 229          void SelfLearn_Reset(void)
 230             {
 231   1         if(IDkey_selflearn_flag6 == 1)
 232   1            {
 233   2            if(++IDkey_selflearn_flag6count > 5)
 234   2               {
 235   3               IDkey_selflearn_HVcount = 0;
 236   3               IDkey_selflearn_LVcount = 0;
 237   3               IDkey_selflearn_flag1 = 0;
 238   3               IDkey_selflearn_flag2 = 0;
 239   3               IDkey_selflearn_flag3 = 0;
 240   3               IDkey_selflearn_flag4 = 0;
C51 COMPILER V9.51   OPERATION                                                             05/08/2015 10:02:48 PAGE 5   

 241   3               IDkey_selflearn_flag5 = 0;
 242   3               IDkey_selflearn_flag6 = 0;
 243   3               IDkey_selflearn_flag6count = 0;           
 244   3               }        
 245   2            }
 246   1         }
 247          
 248          /*---------------------------------------------------
 249             Fell_Alarm_to_Slave()
 250             Send fell alarm signal to remote slave.
 251          ----------------------------------------------------*/
 252          void Fell_Alarm_to_Slave(void)
 253             {
 254   1         if((fell_flag==1)&&(fell_alarm_count<5))
 255   1            {
 256   2            UART_Send_Data(ComMode_5);                                                       
 257   2            fell_alarm_count++;
 258   2            }  
 259   1         }
 260          
 261          /*----------------------------------------------------
 262             Raise_Alarm_to_Slave()
 263             Send raised alarm signal to remote slave
 264          -----------------------------------------------------*/
 265          void Raise_Alarm_to_Slave(void)
 266             {
 267   1         if((raised_flag==1)&&(raised_alarm_count<5))    
 268   1            {
 269   2            UART_Send_Data(ComMode_4);                                                       
 270   2            raised_alarm_count++;
 271   2            }        
 272   1         }
 273          
 274          /*----------------------------------------------------
 275             Batstolen_Alarm_to_Slave()
 276             Send battery stolen alarm signal to remote slave
 277          -----------------------------------------------------*/
 278          void Batstolen_Alarm_to_Slave(void)
 279             {
 280   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 5))
 281   1            {
 282   2            UART_Send_Data(ComMode_2);                                                       
 283   2            battery_stolen_count++;
 284   2            }  
 285   1         }
 286          
 287          /*-----------------------------------------------------
 288             Never_Alarm_Action()
 289             ID cert
 290          /*---------------------------------------------------
 291             end of file
 292          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
C51 COMPILER V9.51   OPERATION                                                             05/08/2015 10:02:48 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
