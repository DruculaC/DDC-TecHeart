C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE main.c COMPACT ROM(COMPACT) BROWSE INCDIR(..\Library) D
                    -EBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-F program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          #include "main.h"             
   8          #include "port.h"
   9          
  10          #include "AD.h"
  11          #include "Timer.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Delay.h"
  15          #include "communication.h"
  16          #include "Other.h"
  17          #include "battery.h"
  18          #include "UART.h"
  19          #include "ISP_DataFlash.h"
  20          #include "schedular.h"
  21          
  22          
  23          /*------- Public variable declarations --------------------------*/
  24          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  25          extern bit enable_sensor_delayEN;
  26          
  27          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 2   

  53          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  72          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  73          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  74          bit sensor_3rdalarm_flag = 0;
  75          bit wheeled_flag = 0;
  76          tWord wheeled_count = 0;
  77          tWord match_button_count = 0;
  78          
  79          // ------ Private variable definitions -----------------------------
  80          tWord stolen_alarm_count = 0;
  81          bit raised_alarm_flag = 0;
  82          bit fell_alarm_flag = 0;
  83          bit Host_battery_high_flag = 0;
  84          bit wire_broken_EN = 0;
  85          tWord Mode_detect_count = 0;
  86          bit Mode_select = 0; // Ä£Ê½Ñ¡Ôñ£¬0±íÊ¾×Ô¶¯Ä£Ê½£¬1±íÊ¾ÊÖ¶¯Ä£Ê½
  87          
  88          bit powersave_enable = 0;
  89          
  90          bit itrpt_EN = 1;
  91          tByte itrpt_count = 0;
  92          bit idle_EN = 0;
  93          
  94          bit Auto_transmit = 0;        // 0±íÊ¾·Ç×Ô¶¯·¢ËÍÊı¾İ£¬1±íÊ¾×Ô¶¯·¢ËÍÊı¾İ½øĞĞÈÏÖ¤
  95          bit IDflash_EN = 0;
  96          tWord match_button_HVcount = 0;
  97          tWord match_button_LVcount = 0;
  98          bit match_button_flag1 = 0;
  99          bit match_button_flag2 = 0;
 100          bit match_button_flag3 = 0;
 101          bit match_button_flag4 = 0;
 102          bit match_button_flag5 = 0;
 103          bit match_button_flag6 = 0;
 104          tByte match_button_flag6count = 0;
 105          
 106          tWord receiver_EN_count = 0;
 107          tWord receiver_DisEN_count = 0;
 108          
 109          bit match_moto_EN = 0;
 110          
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 3   

 111          bit match_button_touched = 0;
 112          
 113          bit battery_LV_flag = 0;
 114          tByte battery_LV_flag_count = 0;
 115          bit battery_HV_flag = 0;
 116          tByte battery_HV_flag_count = 0;
 117          tByte battery_HV_speech_count = 0;
 118          bit battery_HV_speech_over = 0;
 119          
 120          code tByte IDkey6 _at_ 0x003000;
 121          code tByte IDkey7 _at_ 0x003001;
 122          code tByte IDkey8 _at_ 0x003002;
 123          code tByte IDkey9 _at_ 0x003003;
 124          code tByte IDkey10 _at_ 0x003004;
 125          code tByte IDkey11 _at_ 0x003005;
 126          
 127          /*--------------------------------------------------------------*/
 128          
 129          void main(void)
 130             {
 131   1         InitVoice();
 132   1         InitUART600();
 133   1         TR0 = 1;
 134   1      
 135   1         // ¼üÅÌÖĞ¶Ï³õÊ¼»¯
 136   1         press_open_button = 1;
 137   1         press_close_button = 1;
 138   1         
 139   1         KBLS1 |= 0x03;
 140   1         KBLS0 |= 0x03;
 141   1         KBIF &= 0xfe;
 142   1         KBIE |= 0x02;
 143   1         EA = 1;
 144   1      
 145   1         Moto_EN = 1;      //³õÊ¼»¯£¬¹Ø±ÕÂí´ï
 146   1         transmit_wire = 1;
 147   1         voice_EN = 0;        //¿ª»úÊ±£¬½«¹¦·Å¹Ø±Õ
 148   1         P10=1;
 149   1         
 150   1         
 151   1         stolen_alarm_count = 0;       //Çå±¨¾¯¼ÆÊıÆ÷
 152   1         stolen_alarm_flag = 0;        //Çå±¨¾¯±êÖ¾
 153   1      
 154   1         transmiter_EN = 0;      // turn off the transmitter
 155   1         receiver_EN = 0;     // turn on the receiver
 156   1      
 157   1         transceiver_power_enable = 1;         // ÉÏµçÊ±ÎŞÏßÄ£¿éµçÔ´¹Ø±Õ
 158   1         
 159   1         while(1)
 160   1            {           
 161   2            SCH_Dispatch_Tasks();
 162   2      
 163   2            if(idle_EN == 1)
 164   2               {
 165   3               EKB = 1;
 166   3               idle_EN = 0;
 167   3               PCON |= 0x02;        
 168   3               }
 169   2      
 170   2            // Ö÷»ú±»µÁ±¨¾¯
 171   2            if(stolen_alarm_flag == 1)    
 172   2               {
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 4   

 173   3               // ÓïÒôÌáÊ¾£¬Âí´ïÕñ¶¯
 174   3               Alarm_stolen_speech();     
 175   3               Moto_Vibration();          
 176   3               stolen_alarm_flag = 0;
 177   3               }  
 178   2      
 179   2            // Ì§ÆğĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´ÎÌ§ÆğÖ»·¢4±é¡£
 180   2            if(raised_alarm_flag == 1) 
 181   2               {
 182   3               Alarm_raised_speech();     
 183   3               Moto_Vibration();         
 184   3               raised_alarm_flag = 0;
 185   3               }
 186   2      
 187   2            // µ¹µØĞÅºÅ±¨¾¯£¬Ã¿´Î±¨ÍêºóÇå0£¬Èç¹ûÔÙ´Î½Óµ½Ôò¼ÌĞø±¨¡£Ò»°ãÀ´Ëµ£¬Ö÷»úÃ¿´Îµ¹µØÖ»·¢4±é¡£
 188   2            if(fell_alarm_flag == 1)
 189   2               {
 190   3               Alarm_fell_speech();      
 191   3               Moto_Vibration();         
 192   3               fell_alarm_flag=0;
 193   3               }
 194   2      
 195   2            if(wire_broken_EN == 1)
 196   2               {
 197   3               wire_broken_speech();
 198   3               Moto_Vibration();         
 199   3               wire_broken_EN = 0;
 200   3               }
 201   2            
 202   2            if(battery_stolen_EN == 1)
 203   2               {
 204   3               Host_battery_high_alarm_speech();
 205   3               battery_stolen_EN = 0;
 206   3               Moto_Vibration();                
 207   3               }
 208   2            
 209   2            
 210   2      //    sEOS_Go_To_Sleep();        
 211   2            }  
 212   1         }
 213          
 214          
 215          /*------------------------------------------------------------------
 216             timerT0()
 217             ¶¨Ê±Æ÷0Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷
 218          --------------------------------------------------------------------*/
 219          
 220          void timer0() interrupt interrupt_timer_0_overflow
 221             {
 222   1         // ÖØ×°ÔÚ¶¨Ê±Æ÷µÄÊ±¼äÉèÖÃ
 223   1         TH0 = timer0_8H;
 224   1         TL0 = timer0_8L;
 225   1      
 226   1         // ÉèÖÃÒ»¸öÃ¿3sµÄ²Ù×÷
 227   1         if(++timer0_count >= 2000)    
 228   1            {
 229   2               
 230   2            // Ã¿¸ö3s×öÒ»´ÎµçÁ¿¼ì²â£¬²¢½øĞĞÏà¹ØµÄµçÁ¿ÌáÊ¾
 231   2            CheckADC();
 232   2            
 233   2            if(ADC_check_result <= 0x368)                 // 3.11V/3.64V µçÁ¿²»×ã
 234   2               {
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 5   

 235   3               battery_LV_flag = 1;
 236   3               battery_HV_flag = 0;
 237   3               battery_HV_speech_over = 0;
 238   3               }
 239   2            else if(ADC_check_result >= 0x37a)            // 3.52V/4.03V µçÁ¿³ä×ã
 240   2               {
 241   3               battery_HV_flag = 1;
 242   3               battery_LV_flag = 0;
 243   3               }
 244   2            else
 245   2               {
 246   3               battery_LV_flag = 0;
 247   3               battery_HV_flag = 0;
 248   3               }
 249   2                  
 250   2      /*    if((battery_HV_flag == 1)&&(battery_HV_speech_over == 0))
 251   2               {
 252   2               if(++battery_HV_flag_count > 3)
 253   2                  {
 254   2                  Battery_high_alarm_speech();
 255   2                  battery_HV_flag_count = 0;
 256   2                  if(++battery_HV_speech_count >= 3)
 257   2                     {
 258   2                     battery_HV_speech_over = 1;
 259   2                     battery_HV_speech_count = 0;
 260   2                     }
 261   2                  }
 262   2               }
 263   2      */    
 264   2            if(battery_LV_flag == 1)
 265   2               {
 266   3               if(++battery_LV_flag_count > 20)
 267   3                  {
 268   4                  Battery_low_alarm_speech();
 269   4                  battery_LV_flag_count = 0;
 270   4                  }        
 271   3               }
 272   2                        
 273   2            if(match_button_flag6 == 1)
 274   2               {
 275   3               if(++match_button_flag6count > 10)
 276   3                  {
 277   4                  match_button_HVcount = 0;
 278   4                  match_button_LVcount = 0;
 279   4                  match_button_flag1 = 0;
 280   4                  match_button_flag2 = 0;
 281   4                  match_button_flag3 = 0;
 282   4                  match_button_flag4 = 0;
 283   4                  match_button_flag5 = 0;
 284   4                  match_button_flag6 = 0;
 285   4                  match_moto_EN = 0;
 286   4                  match_button_flag6count = 0;           
 287   4                  }        
 288   3               }     
 289   2            // ½«¼ÆÊıÇå0
 290   2            timer0_count = 0;
 291   2            }
 292   1            
 293   1         if((toggle_button == 1)&&(idle_EN == 0))
 294   1            {
 295   2            transceiver_power_enable = 1;
 296   2            receiver_EN = 0;
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 6   

 297   2            transmiter_EN = 0;
 298   2            RXD = 0;
 299   2            TXD = 0;
 300   2            idle_EN = 1;
 301   2            }
 302   1         
 303   1         if((transceiver_power_enable == 0)&&(match_button_flag6 == 0))
 304   1            {
 305   2            if(++receiver_EN_count > 250)
 306   2               {
 307   3               transceiver_power_enable = 1;
 308   3               receiver_EN = 0;
 309   3               RXD = 0;
 310   3               TXD = 0;
 311   3      //       receiver_EN = 1;
 312   3               receiver_EN_count = 0;
 313   3               }
 314   2            }  
 315   1         
 316   1         if((transceiver_power_enable == 1)&&(match_button_flag6 == 0))
 317   1            {     
 318   2            if(++receiver_DisEN_count > 1000)
 319   2               {
 320   3               transceiver_power_enable = 0;
 321   3               UART_Send_Data_F(ComMode_1);
 322   3               receiver_EN = 0;
 323   3               RXD = 1;
 324   3      //       receiver_EN = 0;
 325   3               receiver_DisEN_count = 0;
 326   3               }
 327   2      
 328   2            }
 329   1         
 330   1         if(match_button == 0)
 331   1            {
 332   2            match_button_HVcount = 0;
 333   2                     
 334   2            if(++match_button_LVcount > 4000)
 335   2               {
 336   3               match_button_LVcount = 4002;
 337   3               match_button_flag1 = 0;
 338   3               match_button_flag2 = 0;
 339   3               match_button_flag3 = 0;
 340   3               match_button_flag4 = 0;
 341   3               match_button_flag5 = 0;
 342   3               }
 343   2            else
 344   2               {
 345   3               match_button_flag1 = 1;
 346   3               if(match_button_flag2 == 1)
 347   3                  match_button_flag3 = 1;
 348   3               if(match_button_flag4 == 1)
 349   3                  match_button_flag5 = 1;
 350   3               }
 351   2            
 352   2            battery_LV_flag = 0;
 353   2            battery_HV_flag = 0;
 354   2            }
 355   1         else
 356   1            {
 357   2            match_button_LVcount = 0;
 358   2            
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 7   

 359   2            if(match_button_flag1 == 1)
 360   2               match_button_flag2 = 1;
 361   2               
 362   2            if(match_button_flag3 == 1)
 363   2               match_button_flag4 = 1;
 364   2            
 365   2            if(match_button_flag5 == 1)
 366   2               {
 367   3               match_button_flag6 = 1;
 368   3               transceiver_power_enable = 0;
 369   3               receiver_EN_count = 0;
 370   3               receiver_EN = 0;
 371   3               RXD = 1;
 372   3               if(match_moto_EN == 0)
 373   3                  {
 374   4                  Moto_Vibration(); 
 375   4                  match_moto_EN = 1;
 376   4                  }
 377   3               }
 378   2               
 379   2            if(++match_button_HVcount > 4000)
 380   2               {
 381   3               match_button_HVcount = 4002;
 382   3               match_button_flag1 = 0;
 383   3               match_button_flag2 = 0;
 384   3               match_button_flag3 = 0;
 385   3               match_button_flag4 = 0;
 386   3               match_button_flag5 = 0;
 387   3               match_moto_EN = 0;
 388   3      //       match_button_flag6 = 0;
 389   3               }
 390   2            }
 391   1            
 392   1         if(IDflash_EN == 1)
 393   1            {
 394   2            IDflash_EN = 0;
 395   2            match_button_flag1 = 0;
 396   2            match_button_flag2 = 0;
 397   2            match_button_flag3 = 0;
 398   2            match_button_flag4 = 0;
 399   2            match_button_flag5 = 0;
 400   2            match_button_flag6 = 0;
 401   2            match_moto_EN = 0;
 402   2      //    SCH_Add_Task(Self_learn_programming_F, 0, 0);
 403   2            Self_learn_programming_F();
 404   2            Moto_Vibration();
 405   2            Delay(10);
 406   2            Moto_Vibration();
 407   2            match_button_flag6count = 0;
 408   2            }
 409   1         }
 410          
 411          /*-----------------------------------------------
 412             UART interrupt
 413          -----------------------------------------------*/
 414          void uart_isr() interrupt 4 
 415             {
 416   1         if(RI)
 417   1            {
 418   2            RI=0;
 419   2            received_data_buffer[data_count] = SBUF;
 420   2            
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 8   

 421   2            if(match_button_flag6 == 0)
 422   2               {
 423   3               // judge whether buffer[0] is CmdHead
 424   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 425   3                  {
 426   4                  data_count = 1;
 427   4                  }
 428   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 429   3                  {
 430   4                  data_count = 2;
 431   4                  }
 432   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 433   3                  {
 434   4                  data_count = 3;
 435   4                  }
 436   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 437   3                  {
 438   4                  data_count = 4;
 439   4                  }
 440   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 441   3                  {
 442   4                  data_count = 5;
 443   4                  }
 444   3               else if(data_count == 5)
 445   3                  {
 446   4                  receive_data_finished_flag = 1;
 447   4                  data_count = 0;
 448   4                  }
 449   3               else 
 450   3                  {
 451   4                  data_count = 0;
 452   4                  }
 453   3      
 454   3               if(receive_data_finished_flag==1)   
 455   3                  {
 456   4                  receive_data_finished_flag=0;       
 457   4                  switch(received_data_buffer[5])
 458   4                     {
 459   5                     case ComMode_2:
 460   5                        {
 461   6                        battery_stolen_EN = 1;
 462   6                        }
 463   5                     break;
 464   5                     
 465   5                     case ComMode_3:
 466   5                        {
 467   6                        stolen_alarm_flag = 1;
 468   6      
 469   6                        raised_alarm_count=0;
 470   6                        raised_alarm_flag=0;
 471   6                        fell_alarm_count=0;
 472   6                        fell_alarm_flag=0;
 473   6                        }
 474   5                     break;
 475   5                  
 476   5                     case ComMode_4:
 477   5                        {
 478   6                        raised_alarm_flag=1;
 479   6      
 480   6                        stolen_alarm_count=0;
 481   6                        stolen_alarm_flag=0;
 482   6                        fell_alarm_count=0;
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 9   

 483   6                        fell_alarm_flag=0;
 484   6                        }
 485   5                     break;
 486   5      
 487   5                     case ComMode_5:
 488   5                        {
 489   6                        fell_alarm_flag=1;   
 490   6      
 491   6                        stolen_alarm_count=0;
 492   6                        stolen_alarm_flag=0;
 493   6                        raised_alarm_count=0;
 494   6                        raised_alarm_flag=0;
 495   6                        }
 496   5                     break;
 497   5      
 498   5                     case ComMode_6:
 499   5                        {
 500   6                        wire_broken_EN = 1;
 501   6                        }
 502   5                     break;
 503   5                     }
 504   4                  }
 505   3               }
 506   2            else
 507   2               {
 508   3               if((data_count == 0)&&(received_data_buffer[0] == CmdHead))
 509   3                  {
 510   4                  data_count = 1;
 511   4                  }
 512   3               else if((data_count == 1)&&(received_data_buffer[1] == ComMode_1))
 513   3                  {
 514   4                  data_count = 2;
 515   4                  }
 516   3               else if(data_count == 2)
 517   3                  {
 518   4                  data_count = 3;
 519   4                  }
 520   3               else if(data_count == 3)
 521   3                  {
 522   4                  data_count = 4;
 523   4                  }
 524   3               else if(data_count == 4)
 525   3                  {
 526   4                  data_count = 5;
 527   4                  }
 528   3               else if(data_count == 5)
 529   3                  {
 530   4                  data_count = 6;
 531   4                  }
 532   3               else if(data_count == 6)
 533   3                  {
 534   4                  data_count = 0;
 535   4                  IDflash_EN = 1;
 536   4                  }
 537   3               else 
 538   3                  {
 539   4                  data_count = 0;
 540   4                  }
 541   3               }     
 542   2            }
 543   1         }
 544          
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 10  

 545          /*------------------------------------------------------------------
 546             timerT1()
 547             ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷
 548             
 549          void timerT1() interrupt interrupt_timer_1_overflow         
 550             {
 551             // ÖØ×°ÔÚ¶¨Ê±Æ÷1µÄÉèÖÃ
 552             TH1 = timer1_8H;           
 553             TL1 = timer1_8L;
 554          
 555             // receive a tyte
 556             receive_byte();
 557             
 558             // receive a word after every byte
 559             receive_word();
 560          
 561             if(receive_data_finished_flag==1)   //ËµÃ÷½ÓÊÕµ½ÁËÊı¾İ£¬¿ªÊ¼´¦Àí
 562                {
 563                receive_data_finished_flag=0; //Çå½ÓÊÕ±êÖ¾
 564                switch(received_data_buffer[2])//½âÎöÖ¸Áî
 565                   {
 566                   case ComMode_2:
 567                      {
 568                      battery_stolen_EN = 1;
 569                      Moto_Vibration();          
 570                      }
 571                   break;
 572                   
 573                   case ComMode_3:
 574                      {
 575                      stolen_alarm_flag = 1;
 576                      Moto_Vibration();         
 577          
 578                      raised_alarm_count=0;
 579                      raised_alarm_flag=0;
 580                      fell_alarm_count=0;
 581                      fell_alarm_flag=0;
 582                      }
 583                   break;
 584                
 585                   case ComMode_4:
 586                      {
 587                      raised_alarm_flag=1;
 588                      Moto_Vibration();         
 589          
 590                      stolen_alarm_count=0;
 591                      stolen_alarm_flag=0;
 592                      fell_alarm_count=0;
 593                      fell_alarm_flag=0;
 594                      }
 595                   break;
 596          
 597                   case ComMode_5:
 598                      {
 599                      fell_alarm_flag=1;   
 600                      Moto_Vibration();         
 601          
 602                      stolen_alarm_count=0;
 603                      stolen_alarm_flag=0;
 604                      raised_alarm_count=0;
 605                      raised_alarm_flag=0;
 606                      }
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 10:02:48 PAGE 11  

 607                   break;
 608          
 609                   case ComMode_6:
 610                      {
 611                      wire_broken_EN = 1;
 612                      Moto_Vibration();         
 613                      }
 614                   break;
 615                   }
 616                }
 617             }
 618          --------------------------------------------------------------------*/
 619          
 620          /*-----------------------------------------------------------
 621             KBI_ISR()
 622             ¼üÅÌÖĞ¶Ï£¬Ê¹Ğ¾Æ¬´ÓÊ¡µçÄ£Ê½ÖĞ»½ĞÑ
 623          -----------------------------------------------------------*/
 624          void KBI_ISR(void) interrupt 7
 625             {
 626   1         EKB = 0;
 627   1         KBIF &= 0xfc;
 628   1         transceiver_power_enable = 0;
 629   1         receiver_EN = 0;
 630   1         RXD = 1;
 631   1         match_button_touched = 1;
 632   1      // EKB = 1;
 633   1         }
 634                
 635          /*---------------------------------------------------
 636             end of file
 637          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    995    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     66    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     38    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
