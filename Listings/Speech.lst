C51 COMPILER V9.54   SPEECH                                                                02/02/2016 10:30:49 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SPEECH
OBJECT MODULE PLACED IN .\Objects\Speech.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Speech.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROW
                    -SE DEBUG OBJECTEXTEND PRINT(.\Listings\Speech.lst) TABS(3) OBJECT(.\Objects\Speech.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             Simple switch interface code, with software debounce.
   5          
   6             COPYRIGHT
   7             ---------
   8             This code is copyright (c) 2001 by Richard Zhang.
   9          -*------------------------------------------------------------------*/
  10          
  11          #include "Main.h"
  12          #include "Port.h"
  13          
  14          #include "Speech.h"
  15          #include "Delay.h"
  16          #include "Battery.h"
  17          
  18          // ------ Public variable definitions ------------------------------
  19          bit Speech_blocked_G;   // Block other speech program.
  20          
  21          // ------ Public variable declarations -----------------------------
  22          extern bit Rotate_CW_G;
  23          extern bit Sensor_blocked_G;
  24          extern bit Alarm_blocked_G;
  25          
  26          // ------ Private variables ----------------------------------------
  27          tByte Speech_scenario;
  28          tByte Speech_time;
  29          tByte Speech_time_thres;
  30          bit Firsttime_power_up_G;
  31          
  32          // ------ Private constants ----------------------------------------
  33          
  34          /*------------------------------------------------------------------*-
  35            Speech_Init()
  36            Initialisation function for the speech library.
  37          -*------------------------------------------------------------------*/
  38          void Speech_Init(void)
  39             {
  40   1         Speech_EN = 0;
  41   1         Speech_RST = 0;   
  42   1         Speech_data = 0;
  43   1         Speech_time = 0;
  44   1         
  45   1         Firsttime_power_up_G = 1;
  46   1         }
  47          
  48          /*--------------------------------------------------
  49             Send_speech()
  50          ---------------------------------------------------*/
  51          void Send_speech(tByte count_a, tByte time_b)
  52             {
  53   1         tByte i;
  54   1         Speech_EN = 1;
C51 COMPILER V9.54   SPEECH                                                                02/02/2016 10:30:49 PAGE 2   

  55   1         Speech_RST = 0;
  56   1         Delay(LOOP_TIMEOUT_INIT_050ms);
  57   1         Speech_RST = 1;
  58   1         Delay(LOOP_TIMEOUT_INIT_050ms);
  59   1         for(i=0; i < count_a; i++)
  60   1            {
  61   2            Speech_data = 1; 
  62   2            Delay(LOOP_TIMEOUT_INIT_001ms);
  63   2            Speech_data = 0; 
  64   2            Delay(LOOP_TIMEOUT_INIT_001ms);
  65   2            }
  66   1         Speech_time_thres = time_b;
  67   1         
  68   1         if(Speech_scenario != Tick)
  69   1            Speech_scenario = 0;
  70   1         }
  71          
  72          /*----------------------------------------------------------------
  73             Goto_speech()
  74             Update the speech function for every 1s
  75          ------------------------------------------------------------------*/
  76          void Goto_speech(tByte count_b)
  77             {
  78   1         Speech_scenario = count_b;
  79   1         }
  80          
  81          /*----------------------------------------------------------------
  82             Custom_speech()
  83             Update the speech function for every 1s
  84          ------------------------------------------------------------------*/
  85          void Custom_speech(void)
  86             {
  87   1         if(Rotate_CW_G)      // Speech after open lock, not close lock.
  88   1            {
  89   2            #ifdef Taili
                    Goto_speech(Taili_speech);
                    #endif
  92   2            
  93   2            #ifdef Shengbaolong
                    Goto_speech(Shengbaolong_brand);
                    #endif
  96   2            }
  97   1         }
  98          
  99          /*----------------------------------------------------------------
 100             Speech_update()
 101             Update the speech function, 1s/ticket.
 102          ------------------------------------------------------------------*/
 103          void Speech_update(void)
 104             {
 105   1         if(Speech_EN)
 106   1            {
 107   2            Speech_time += 1;
 108   2            if(Speech_time > Speech_time_thres)
 109   2               {
 110   3               Speech_time = 0;
 111   3               Speech_EN = 0;
 112   3               Sensor_blocked_G = 0;
 113   3               }
 114   2            }
 115   1         else
 116   1            {
C51 COMPILER V9.54   SPEECH                                                                02/02/2016 10:30:49 PAGE 3   

 117   2            switch(Speech_scenario)
 118   2               {
 119   3               case No_voice:
 120   3                  {
 121   4                  Send_speech(No_voice, 1);           
 122   4                  }
 123   3               break;
 124   3               case First_touch:
 125   3                  {
 126   4                  Send_speech(First_touch, 3);
 127   4                  }
 128   3               break;
 129   3               case Stolen_motor:
 130   3                  {
 131   4                  Send_speech(Stolen_motor, 9);
 132   4                  Alarm_blocked_G = 0;
 133   4                  }
 134   3               break;
 135   3               case Battery_insufficient:
 136   3                  {
 137   4                  Send_speech(Battery_insufficient, 4);
 138   4                  Custom_speech();
 139   4                  }
 140   3               break;
 141   3               case Battery_5km:
 142   3                  {
 143   4                  Send_speech(Battery_5km, 5);
 144   4                  Custom_speech();
 145   4                  }
 146   3               break;
 147   3               case Battery_10km:
 148   3                  {
 149   4                  Send_speech(Battery_10km, 5);
 150   4                  Custom_speech();
 151   4                  }
 152   3               break;
 153   3               case Battery_15km:
 154   3                  {
 155   4                  Send_speech(Battery_15km, 5);
 156   4                  Custom_speech();
 157   4                  }
 158   3               break;
 159   3               case Battery_20km:
 160   3                  {
 161   4                  Send_speech(Battery_20km, 5);
 162   4                  Custom_speech();
 163   4                  }
 164   3               break;
 165   3               case Battery_35km:
 166   3                  {
 167   4                  Send_speech(Battery_35km, 5);
 168   4                  Custom_speech();
 169   4                  }
 170   3               break;
 171   3               case Appreciate_life:
 172   3                  {
 173   4                  Send_speech(Appreciate_life, 5);
 174   4                  }
 175   3               break;
 176   3               case Shengbaolong_brand:
 177   3                  {
 178   4                  Send_speech(Shengbaolong_brand, 2);
C51 COMPILER V9.54   SPEECH                                                                02/02/2016 10:30:49 PAGE 4   

 179   4                  Goto_speech(Reminder);
 180   4                  }
 181   3               break;
 182   3               case Reminder:
 183   3                  {
 184   4                  Send_speech(Reminder, 2);
 185   4                  Goto_speech(Appreciate_life);
 186   4                  }
 187   3               break;
 188   3               case Stolen_battery:
 189   3                  {
 190   4                  Send_speech(Stolen_battery, 3);
 191   4                  }
 192   3               break;
 193   3               case Siren:
 194   3                  {
 195   4                  Alarm_blocked_G = 1;
 196   4                  Send_speech(Siren, 3);
 197   4                  Goto_speech(Stolen_motor);
 198   4                  }
 199   3               break;
 200   3               case Open_lock:
 201   3                  {
 202   4                  Send_speech(Open_lock, 3);
 203   4                  
 204   4                  // First power up, don't broadcast battery tips.
 205   4                  if(Firsttime_power_up_G == 0)
 206   4                     Battery_broadcast();
 207   4                  Firsttime_power_up_G = 0;
 208   4                  }
 209   3               break;
 210   3               case Close_lock:
 211   3                  {
 212   4                  Send_speech(Close_lock, 3);
 213   4                  Battery_broadcast();
 214   4                  }
 215   3               break;
 216   3               case Second_touch:
 217   3                  {
 218   4                  Send_speech(Second_touch, 7);
 219   4                  }
 220   3               break;
 221   3               case Battery_sufficient:
 222   3                  {
 223   4                  Send_speech(Battery_sufficient, 3);
 224   4                  Custom_speech();
 225   4                  }
 226   3               break;
 227   3               case Tailing_brand:
 228   3                  {
 229   4                  Send_speech(Tailing_brand, 1);
 230   4                  }
 231   3               break;
 232   3               case Taili_brand:
 233   3                  {
 234   4                  Send_speech(Taili_brand, 1);
 235   4                  }
 236   3               break;
 237   3               case Xinri_brand:
 238   3                  {
 239   4                  Send_speech(Xinri_brand, 1);
 240   4                  }
C51 COMPILER V9.54   SPEECH                                                                02/02/2016 10:30:49 PAGE 5   

 241   3               break;
 242   3               case Huanghe_brand:
 243   3                  {
 244   4                  Send_speech(Huanghe_brand, 1);
 245   4                  }
 246   3               break;      
 247   3      //       case Tick:
 248   3      //          {
 249   3      //          Send_speech(Tick, 1);
 250   3      //          }
 251   3      //       break;      
 252   3               case Ticktack:
 253   3                  {
 254   4                  Send_speech(Ticktack, 2);
 255   4                  }
 256   3               break;      
 257   3               case Taili_speech:
 258   3                  {
 259   4                  Send_speech(Taili_speech, 5);
 260   4                  }
 261   3               break;      
 262   3               case Youhu_brand:
 263   3                  {
 264   4                  Send_speech(Youhu_brand, 1);
 265   4                  }
 266   3               break;      
 267   3               case Lvneng_brand:
 268   3                  {
 269   4                  Send_speech(Lvneng_brand, 1);
 270   4                  }
 271   3               break;
 272   3               }     
 273   2            }
 274   1         }
 275             
 276          /*----------------------------------------------------------------
 277             Speech_s_update_s()
 278             Instant speech update, 1ms/ticket, for now, only "Tich" voice.
 279          ------------------------------------------------------------------*/
 280          void Speech_s_update(void)
 281             {
 282   1         if(Speech_scenario == Tick)
 283   1            {
 284   2            if(Speech_EN)
 285   2               {
 286   3               Speech_time += 1;
 287   3               if(Speech_time > Speech_time_thres)
 288   3                  {
 289   4                  Speech_time = 0;
 290   4                  Speech_EN = 0;
 291   4                  Sensor_blocked_G = 0;
 292   4                  Speech_scenario = 0;
 293   4                  }
 294   3               }
 295   2            else
 296   2               {
 297   3               switch(Speech_scenario)
 298   3                  {
 299   4                  case Tick:
 300   4                     {
 301   5                     Send_speech(Tick, 1000);
 302   5                     }
C51 COMPILER V9.54   SPEECH                                                                02/02/2016 10:30:49 PAGE 6   

 303   4                  break;      
 304   4                  }     
 305   3               }     
 306   2            }
 307   1         }
 308          
 309          /*------------------------------------------------------------------*-
 310            ---- END OF FILE -------------------------------------------------
 311          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    453    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      3       3
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
