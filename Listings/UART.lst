C51 COMPILER V9.54   UART                                                                  02/02/2016 10:30:51 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\UART.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE UART.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\UART.lst) TABS(3) OBJECT(.\Objects\UART.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             COPYRIGHT
   5             ---------
   6             This code is copyright (c) 2015 by Richard Zhang.
   7          -*------------------------------------------------------------------*/
   8          
   9          #include "Main.h"
  10          #include "Port.h"
  11          
  12          #include "UART.h"
  13          #include "Speech.h"
  14          #include "Alarm.h"
  15          #include "Sensor.h"
  16          
  17          // ------ Public variable definitions ------------------------------
  18          bit ID_certificated_G;     // Flag for ID card certificated.
  19          bit Received_finished_G;   // Flag for receiving 6 bytes.
  20          bit Silent_mode_G;         // Flag for silent mode.
  21          tByte ID_certificated_count;     // The count times of ID certificating.
  22          bit Disable_alarm_mode_G;        // Flag for disabling alarm mode.
  23          
  24          code tByte IDkey0 _at_ 0x003000;
  25          code tByte IDkey1 _at_ 0x003001;
  26          code tByte IDkey2 _at_ 0x003002;
  27          code tByte IDkey3 _at_ 0x003003;
  28          code tByte IDkey4 _at_ 0x003004;
  29          code tByte IDkey5 _at_ 0x003005;
  30          
  31          // ------ Public variable declarations -----------------------------
  32          extern tByte Speech_time;
  33          
  34          extern bit Self_learn_G;
  35          extern tByte ID_certificated_time;
  36          
  37          // ------ Private variables ----------------------------------------
  38          tByte Received_cache[7];      // Cache of receiving bytes.
  39          tByte Data_count;             // Counts of receiving data, multi bytes.
  40          tByte Received_count;         // How many bytes received.
  41          
  42          // ------ Private constants ----------------------------------------
  43          
  44          /*------------------------------------------------------------------*-
  45            UART_Init()
  46            Initialisation function for the switch library.
  47          -*------------------------------------------------------------------*/
  48          void UART_Init(tWord Baudrate)
  49             {
  50   1         // Set PCON.6 SMOD0 = 0, 
  51   1         PCON &= 0xbf;
  52   1         
  53   1         // Set P1.0 and P1.1 as UART port.
  54   1         AUXR1 &= 0xbf;
C51 COMPILER V9.54   UART                                                                  02/02/2016 10:30:51 PAGE 2   

  55   1         
  56   1         // Mode 1, Start+8bytes+Stop, SM2 = 0, TI = 1.
  57   1         SCON = 0x5a;
  58   1         
  59   1         // Clear all T1 bits, and set to 8bit auto reload.
  60   1         TMOD &= 0x0f;
  61   1         TMOD |= 0x20;
  62   1         TH1 = TL1 = -(OSC_FREQ/12/32/Baudrate);
  63   1         
  64   1         TR1 = 1;
  65   1         TI = 0;
  66   1         ES = 1;
  67   1         
  68   1         Received_count = 0;
  69   1         ID_certificated_count = 0;
  70   1         Silent_mode_G = 0;
  71   1         Disable_alarm_mode_G = 0;
  72   1         }
  73          
  74          /*-------------------------------------------------
  75             Sendbyte()
  76             Send A byte.
  77          ----------------------------------------------------*/
  78          void Sendbyte(tByte character)
  79             {
  80   1         SBUF = character;
  81   1         while(!TI);
  82   1         TI = 0;
  83   1         }
  84          /*-----------------------------------------------------
  85             Senddata()
  86             Send all data.
  87          ------------------------------------------------------*/
  88          void Senddata(tByte *addr, tByte datalength)
  89             {
  90   1         while(datalength--)
  91   1            {
  92   2            Sendbyte(*addr++);
  93   2            }
  94   1         }
  95          /*-----------------------------------------------
  96             UART interrupt
  97          -----------------------------------------------*/
  98          void uart_isr() interrupt 4 
  99             {
 100   1         if(RI)
 101   1            {
 102   2            RI=0;
 103   2            
 104   2            // Receive one byte, and move left.
 105   2            for(Data_count = 5; Data_count > 0; Data_count--)
 106   2               {
 107   3               Received_cache[Data_count] = Received_cache[Data_count-1];
 108   3               }
 109   2            Received_cache[0] = SBUF;
 110   2            
 111   2            // If in Self learning mode, receive 6 bytes.
 112   2            if(Self_learn_G)
 113   2               {
 114   3               Received_count += 1;
 115   3               if(Received_count >= 6)
 116   3                  {
C51 COMPILER V9.54   UART                                                                  02/02/2016 10:30:51 PAGE 3   

 117   4                  Received_count = 0;
 118   4                  // Set receiving finished.
 119   4                  Received_finished_G = 1;
 120   4                  }
 121   3               }
 122   2            else
 123   2               {
 124   3               if((Received_cache[5] == IDkey0)&&(Received_cache[4] == IDkey1)&&(Received_cache[3] == IDkey2))
 125   3                  {
 126   4                  if((Received_cache[2] == IDkey3)&&(Received_cache[1] == IDkey4)&&(Received_cache[0] == IDkey5))
 127   4                     {              
 128   5                     // immediately close the alarm speech and alarm detecting.
 129   5                     Alarm_reset();
 130   5                     Sensor_reset();
 131   5                     
 132   5                     // clear speech time for tick voice, broadcast tich speech in 100ms.
 133   5                     Speech_time = 0;     
 134   5                     Goto_speech(Tick);
 135   5                     
 136   5                     // Set 1 after Tick, otherwise Elecmotor will conflict to Tick voice.
 137   5                     ID_certificated_G = 1;
 138   5                     ID_certificated_time = 0;
 139   5                     
 140   5                     // Silent mode detecting.
 141   5                     ID_certificated_count += 1;
 142   5                     if(ID_certificated_count > 1)
 143   5                        Silent_mode_G = 1;
 144   5                     
 145   5                     // Disabling alarm mode detecting.
 146   5                     if(ID_certificated_count > 5)
 147   5                        {
 148   6                        Disable_alarm_mode_G = ~Disable_alarm_mode_G;
 149   6                        ID_certificated_count = 0;
 150   6                        Goto_speech(Ticktack);
 151   6                        
 152   6                        // Reset silent mode.
 153   6                        Silent_mode_G = 0;
 154   6                        }
 155   5                     }
 156   4                  }        
 157   3               }
 158   2            }
 159   1         }
 160          /*------------------------------------------------------------------*-
 161            ---- END OF FILE -------------------------------------------------
 162          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    328    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10       3
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
