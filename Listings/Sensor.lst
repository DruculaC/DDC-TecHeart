C51 COMPILER V9.54   SENSOR                                                                02/02/2016 10:30:49 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SENSOR
OBJECT MODULE PLACED IN .\Objects\Sensor.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Sensor.c COMPACT ROM(COMPACT) OPTIMIZE(8,SPEED) BROW
                    -SE DEBUG OBJECTEXTEND PRINT(.\Listings\Sensor.lst) TABS(3) OBJECT(.\Objects\Sensor.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             Simple switch interface code, with software debounce.
   5          
   6             COPYRIGHT
   7             ---------
   8             This code is copyright (c) 2001 by Richard Zhang.
   9          -*------------------------------------------------------------------*/
  10          
  11          #include "Main.h"
  12          #include "Port.h"
  13          
  14          #include "Sensor.h"
  15          #include "Speech.h"
  16          #include "Alarm.h"
  17          
  18          // ------ Public variable definitions ------------------------------
  19          bit Sensor_blocked_G;      // Block sensor detection.
  20          bit Sensor_EN;             // Sensor detection switch, 1 for open, 0 for close.
  21          bit Sensor_delay_EN;       // Delay some time to enable Sensor_EN.
  22          tByte Sensor_delay_time;   // The delay time to really enable Sensor_EN.
  23          
  24          // ------ Public variable declarations -----------------------------
  25          extern bit Sensor_to_alarm;
  26          extern bit Program_blocked_G;
  27          extern bit Disable_alarm_mode_G;
  28          extern tByte Speech_time;
  29          
  30          // ------ Private variables ----------------------------------------
  31          tByte Sensor_time;            // Sensor input signal low voltage time
  32          tWord Sensor_none_time;       // Sensor input signal high voltage time
  33          tByte Sensor_trigger_level;   // Trigger leven for sensor, 1 means first time touch, 
  34                                        // 2 means second time touch continuously, 
  35                                        // 3 means really stolen touch, then alarm.
  36          tWord Sensor_blocked_time;    // Using block time for trigger leven 1 delay, 1.5s.
  37          bit Wire_cut_G;      // Flag for wire cut out.
  38          
  39          // ------ Private constants ----------------------------------------
  40          
  41          /*------------------------------------------------------------------*-
  42            Sensor_update()
  43            Initialisation function for the switch library.
  44          -*------------------------------------------------------------------*/
  45          void Sensor_update(void)
  46             {
  47   1         if((Sensor_blocked_G)||(Program_blocked_G)||(!Sensor_EN)||(Disable_alarm_mode_G))
  48   1            {
  49   2            // detect sensor level 2 after 3s.
  50   2            if(Sensor_trigger_level == 2)
  51   2               {
  52   3               Sensor_blocked_time += 1;
  53   3               if(Sensor_blocked_time > 1500)
  54   3                  {
C51 COMPILER V9.54   SENSOR                                                                02/02/2016 10:30:49 PAGE 2   

  55   4                  Sensor_blocked_G = 0;
  56   4                  Sensor_blocked_time = 0;
  57   4                  return;
  58   4                  }
  59   3               return;
  60   3               }
  61   2            else
  62   2               return;
  63   2            }
  64   1         
  65   1         Sensor_vibration_detect();
  66   1         
  67   1         Sensor_cutting_wire();
  68   1         }
  69          
  70          /*------------------------------------------------------------------*-
  71            Sensor_cutting_wire()
  72            Detecting cutting wire. 1 means "normal", 0 for "wire cut out"
  73          -*------------------------------------------------------------------*/
  74          void Sensor_cutting_wire(void)
  75             {
  76   1         if((Wire_cut == 0)&&(Wire_cut_G == 0))
  77   1            {
  78   2            Wire_cut_G = 1;
  79   2            
  80   2            // Triggle alarm(case 3).
  81   2            Sensor_blocked_G = 1;
  82   2            Sensor_to_alarm = 1;
  83   2            }
  84   1         else if((Wire_cut == 1)&&(Wire_cut_G == 1))
  85   1            {
  86   2            Wire_cut_G = 0;      
  87   2            Alarm_reset();
  88   2            // clear speech time for tick voice, broadcast tich speech in 100ms.
  89   2            Speech_time = 0;     
  90   2            Goto_speech(Tick);
  91   2            }
  92   1         }
  93          
  94          /*------------------------------------------------------------------*-
  95            Sensor_Init()
  96            Initialisation function for the switch library.
  97          -*------------------------------------------------------------------*/
  98          void Sensor_Init(void)
  99             {
 100   1         // Set PIN3, PIN19 and PIN26 to input mode(high-res mode).
 101   1         P0M1 |= 0x83;
 102   1         P0M2 &= 0x7c;
 103   1         
 104   1         Sensor_time = 0;
 105   1         Sensor_trigger_level = 0;
 106   1         Sensor_blocked_G = 0;
 107   1         Sensor_EN = 0; 
 108   1         Sensor_delay_EN = 0;
 109   1         Sensor_delay_time = 0;
 110   1         
 111   1         Wire_cut_G = 0;
 112   1         }
 113          
 114          /*------------------------------------------------------------------*-
 115            Sensor_reset()
 116            Initialisation function for the switch library.
C51 COMPILER V9.54   SENSOR                                                                02/02/2016 10:30:49 PAGE 3   

 117          -*------------------------------------------------------------------*/
 118          void Sensor_reset(void)
 119             {
 120   1         Sensor_time = 0;
 121   1         Sensor_trigger_level = 0;
 122   1         Sensor_blocked_G = 0;
 123   1         Sensor_EN = 0; 
 124   1         }
 125          
 126          /*------------------------------------------------------------------*-
 127            Sensor_enable()
 128            Initialisation function for the switch library.
 129          -*------------------------------------------------------------------*/
 130          void Sensor_enable(void)
 131             {
 132   1         Sensor_EN = 1; 
 133   1         }
 134          
 135          /*------------------------------------------------------------------*-
 136            Sensor_postpone()
 137            Initialisation function for the switch library.
 138          -*------------------------------------------------------------------*/
 139          void Sensor_postpone(void)
 140             {
 141   1         // Enabling sensor detection 20s after ID expiring or closing lock.
 142   1         if(Sensor_delay_EN)
 143   1            {
 144   2            Sensor_delay_time += 1;
 145   2            if(Sensor_delay_time > 10)
 146   2               {
 147   3               Sensor_delay_EN = 0;
 148   3               Sensor_delay_time = 0;
 149   3               Sensor_enable();
 150   3               }
 151   2            }
 152   1         }
 153          
 154          /*------------------------------------------------------------------*-
 155            Sensor_vibration_detect()
 156            Initialisation function for the switch library.
 157          -*------------------------------------------------------------------*/
 158          void Sensor_vibration_detect(void)
 159             {
 160   1         switch(Sensor_trigger_level)
 161   1            {
 162   2            case 0:
 163   2               {
 164   3               if((!Vertical_sensor)||(!Horizontal_sensor)||(!Micromotion_sensor))
 165   3                  {
 166   4                  Sensor_time += 1;
 167   4                  if(Sensor_time >= 1)
 168   4                     {
 169   5                     Sensor_time = 0;
 170   5                     Sensor_trigger_level = 2;
 171   5                     Sensor_blocked_G = 1;
 172   5                     }
 173   4                  }
 174   3               else
 175   3                  Sensor_time = 0;
 176   3               }
 177   2            break;
 178   2            case 2:
C51 COMPILER V9.54   SENSOR                                                                02/02/2016 10:30:49 PAGE 4   

 179   2               {
 180   3               if((!Vertical_sensor)||(!Horizontal_sensor)||(!Micromotion_sensor))
 181   3                  {
 182   4                  Sensor_time += 1;
 183   4                  Sensor_none_time = 0;
 184   4                  if(Sensor_time >= 2)
 185   4                     {
 186   5                     Sensor_time = 0;
 187   5                     Sensor_trigger_level = 3;
 188   5                     Sensor_blocked_G = 1;
 189   5                     Goto_speech(First_touch);
 190   5                     }        
 191   4                  }
 192   3               else
 193   3                  {
 194   4                  Sensor_time = 0;
 195   4                  
 196   4                  Sensor_none_time += 1;
 197   4                  if(Sensor_none_time > 6000)
 198   4                     {
 199   5                     Sensor_none_time = 0;
 200   5                     Sensor_trigger_level = 0;
 201   5                     }
 202   4                  }        
 203   3               }
 204   2            break;
 205   2            case 3:
 206   2               {
 207   3               if((!Vertical_sensor)||(!Horizontal_sensor)||(!Micromotion_sensor))
 208   3                  {
 209   4                  Sensor_time += 1;
 210   4                  Sensor_none_time = 0;
 211   4                  if(Sensor_time >= 2)
 212   4                     {
 213   5                     Sensor_time = 0;
 214   5                     Sensor_trigger_level = 0;
 215   5                     Sensor_blocked_G = 1;
 216   5                     Sensor_to_alarm = 1;
 217   5                     }        
 218   4                  }
 219   3               else
 220   3                  {
 221   4                  Sensor_time = 0;
 222   4                  
 223   4                  Sensor_none_time += 1;
 224   4                  if(Sensor_none_time > 6000)
 225   4                     {
 226   5                     Sensor_none_time = 0;
 227   5                     Sensor_trigger_level = 0;
 228   5                     }
 229   4                  }        
 230   3               }
 231   2            break;
 232   2            }
 233   1         }
 234          
 235          
 236          /*------------------------------------------------------------------*-
 237            ---- END OF FILE -------------------------------------------------
 238          -*------------------------------------------------------------------*/


C51 COMPILER V9.54   SENSOR                                                                02/02/2016 10:30:49 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    342    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      7    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
