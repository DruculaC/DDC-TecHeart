C51 COMPILER V9.54   ELECMOTOR                                                             08/01/2015 14:54:16 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE ELECMOTOR
OBJECT MODULE PLACED IN .\Objects\Elecmotor.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Elecmotor.c LARGE ROM(COMPACT) OPTIMIZE(8,SPEED) BRO
                    -WSE DEBUG OBJECTEXTEND PRINT(.\Listings\Elecmotor.lst) TABS(3) OBJECT(.\Objects\Elecmotor.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             Simple switch interface code, with software debounce.
   5          
   6             COPYRIGHT
   7             ---------
   8             This code is copyright (c) 2001 by Richard Zhang.
   9          -*------------------------------------------------------------------*/
  10          
  11          #include "Main.h"
  12          #include "Port.h"
  13          
  14          #include "Elecmotor.h"
  15          
  16          // ------ Public variable definitions ------------------------------
  17          
  18          // ------ Public variable declarations -----------------------------
  19          
  20          // ------ Private variables ----------------------------------------
  21          // static bit LED_state_G;
  22          tWord Rotate_time;
  23          bit Rotate_CW_G;
  24          
  25          tByte Magnet_code[3];
  26          bit Coding_G;
  27          tByte Code_time = 0;
  28          tByte Byte_Index = 0;
  29          tByte Bit_Index = 0;
  30           
  31          // ------ Private constants ----------------------------------------
  32          // SW_THRES must be > 1 for correct debounce behaviour
  33          // #define SW_THRES (3)
  34          
  35          /*------------------------------------------------------------------*-
  36            Elecmotor_Init()
  37            Initialisation function for Electronic motor's lock.
  38          -*------------------------------------------------------------------*/
  39          void Elecmotor_Init(void)
  40             {
  41   1         MagnetCon1 = 1;
  42   1         MagnetCon2 = 1;
  43   1         Magnet_code[0] = CmdHead;
  44   1         Magnet_code[1] = CmdAddress;
  45   1         Magnet_code[2] = CmdMode1;
  46   1         Coding_G = 0;
  47   1         }
  48          
  49          /*------------------------------------------------------------------*-
  50            Elecmotor_Init()
  51            Initialisation function for Electronic motor's lock.
  52          -*------------------------------------------------------------------*/
  53          void Elecmotor_update(void)
  54             {  
C51 COMPILER V9.54   ELECMOTOR                                                             08/01/2015 14:54:16 PAGE 2   

  55   1         if(Coding_G == 1)
  56   1            {
  57   2            if(MagnetCon2 == 0)
  58   2               {
  59   3               // whether msb is 1, if yes, maintain 10ms, if not maintain 4ms.
  60   3               if((Magnet_code[Byte_Index] & 0x80) == 0x80)
  61   3                  {
  62   4                  Code_time += 1;
  63   4                  if(Code_time >= 10)  // 5 tickets, about 10ms.
  64   4                     {
  65   5                     Code_time = 0;
  66   5                     Bit_Index += 1;
  67   5                     MagnetCon2 = 1;
  68   5                     // move 1 bit to left.
  69   5                     Magnet_code[Byte_Index] <<= 1;
  70   5                     }
  71   4                  }
  72   3               else
  73   3                  {
  74   4                  Code_time += 1;
  75   4                  if(Code_time >= 4)   // 2 tickets, about 4ms.
  76   4                     {
  77   5                     Code_time = 0;
  78   5                     Bit_Index += 1;
  79   5                     MagnetCon2 = 1;
  80   5                     Magnet_code[Byte_Index] <<= 1;
  81   5                     }     
  82   4                  }
  83   3               
  84   3               if(Bit_Index >= 8)
  85   3                  {
  86   4                  Bit_Index = 0;
  87   4                  Byte_Index += 1;
  88   4                  if(Byte_Index > 2)
  89   4                     {
  90   5                     Byte_Index = 0;
  91   5                     MagnetCon2 = 1;
  92   5                     Coding_G = 0;
  93   5                     }
  94   4                  }        
  95   3               }
  96   2            else
  97   2               {
  98   3               Code_time += 1;
  99   3               if(Code_time >= 4)
 100   3                  {
 101   4                  Code_time = 0;
 102   4                  MagnetCon2 = 0;
 103   4                  }
 104   3               }     
 105   2            }
 106   1         else
 107   1            {
 108   2            // if ratate CW, MagnetCon2 = 0, driving moto to turn CW.
 109   2            if(Rotate_CW_G == 1)
 110   2               {
 111   3               MagnetCon1 = 1;
 112   3               MagnetCon2 = 0;
 113   3               }
 114   2            else
 115   2               {
 116   3               MagnetCon1 = 0;
C51 COMPILER V9.54   ELECMOTOR                                                             08/01/2015 14:54:16 PAGE 3   

 117   3               MagnetCon2 = 1;
 118   3               }
 119   2               
 120   2            Rotate_time += 1; 
 121   2            if(Rotate_time >= 5000)
 122   2               {
 123   3               Rotate_time = 0;
 124   3               Rotate_CW_G = ~Rotate_CW_G;
 125   3               }     
 126   2            }  
 127   1         }
 128          
 129          
 130          /*------------------------------------------------------------------*-
 131            ---- END OF FILE -------------------------------------------------
 132          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    218    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
