C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c COMPACT BROWSE INCDIR(..\Library) DEBUG OBJECTEX
                    -TEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          extern bit sensor_EN;
  30          
  31          
  32          // ------ Private variable definitions -----------------------------
  33          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  34          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  35          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  36          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  37          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  38          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  39          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  40          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  41          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  42          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  43          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  44          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  45          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  46          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  47          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  48          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  49          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  50          
  51          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  52          tByte fell_alarm_count = 0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 2   

  53          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  54          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  55          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  56          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  57          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  58          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  59          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  60          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  61          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  62          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  63          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  64          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  65          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  66          tByte key_rotated_on_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  67          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  68          tWord load_battery_result = 0;
  69          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  70          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  71          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  72          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  73          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  74          bit vibration_flag = 0;
  75          tWord vibration_count = 0;
  76          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  77          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ýºóÖÃ1£¬
  78          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  79          tByte enable_sensor_delay_count = 0;      // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  80          bit sensor_3rdalarm_flag = 0;
  81          bit wheeled_flag = 0;
  82          tWord wheeled_count = 0;
  83          bit IDkey_speech_flash = 0;
  84          
  85          code tByte IDkey6 _at_ 0x003000;
  86          code tByte IDkey7 _at_ 0x003001;
  87          code tByte IDkey8 _at_ 0x003002;
  88          code tByte IDkey9 _at_ 0x003003;
  89          code tByte IDkey10 _at_ 0x003004;
  90          code tByte IDkey11 _at_ 0x003005;
  91          
  92          tWord IDkey_selflearn_HVcount = 0;
  93          tWord IDkey_selflearn_LVcount = 0;
  94          bit IDkey_selflearn_flag1 = 0;
  95          bit IDkey_selflearn_flag2 = 0;
  96          bit IDkey_selflearn_flag3 = 0;
  97          bit IDkey_selflearn_flag4 = 0;
  98          bit IDkey_selflearn_flag5 = 0;
  99          bit IDkey_selflearn_flag6 = 0;
 100          tByte IDkey_selflearn_flag6count = 0;
 101          bit IDkey_flash_EN = 0;
 102          
 103          tByte IDkey_certificated_times = 0;
 104          bit Silence_Flag = 0;
 105          bit flashing_flag = 0;
 106          
 107          tByte Check_Motobattery_count = 0;
 108          bit Check_Motobattery_flag = 0;
 109          bit CheckADC_flag = 0;
 110          
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 3   

 111          bit never_alarm = 0;
 112          bit never_alarm_speech = 0;
 113          
 114          bit slave_nearby_actioned_flag = 0;
 115          tByte slave_nearby_count = 0;
 116          
 117          bit ID_speeched_flag = 0;
 118          
 119          /*------- Private variable declarations --------------------------*/
 120          
 121          void main()
 122             {  
 123   1         InitVoice();
 124   1         
 125   1         #ifdef ID
                 InitUART9600();
                 #endif
 128   1         
 129   1         #ifdef WX
 130   1         InitUART600();
 131   1         #endif
 132   1         
 133   1         InitSensor();
 134   1         
 135   1         InitTransceiver();
 136   1         
 137   1         // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 138   1         InitElecmotor();  
 139   1         
 140   1         Externalmotor = Close;
 141   1         
 142   1         // start Timer 0
 143   1         TR0 = 1;
 144   1         
 145   1         while(1)
 146   1            {
 147   2            hSCH_Dispatch_Tasks();
 148   2            Host_stolen_action();
 149   2            }
 150   1         }
 151          
 152          /*------------------------------------------------------------------
 153             timerT0()
 154             operation every ticket.
 155          --------------------------------------------------------------------*/
 156          
 157          void timer0() interrupt interrupt_timer_0_overflow
 158             {
 159   1         // manually reload timer0 configuration
 160   1         TH0 = timer0_8H;
 161   1         TL0 = timer0_8L;
 162   1      
 163   1         hSCH_Update();
 164   1         
 165   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 166   1         if(++timer0_count >= 2000)
 167   1            {
 168   2            // reset timer0 ticket counter every 2s
 169   2            timer0_count=0;
 170   2            
 171   2            #ifdef ID
                    ENsensor_afterIDcert();
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 4   

                    #endif
 174   2            
 175   2            CheckADC();
 176   2            
 177   2            ENsensor_After_CloseLock();
 178   2            
 179   2            SelfLearn_Reset();
 180   2                  
 181   2            if(++Check_Motobattery_count > 3)
 182   2               {
 183   3               Check_Motobattery_count = 10;
 184   3               if(Check_Motobattery_flag == 1)
 185   3                  {
 186   4                  load_battery_result = ADC_check_result;
 187   4                  verifybattery(load_battery_result);
 188   4                  Check_Motobattery_flag = 0;
 189   4                  }
 190   3               }
 191   2               
 192   2            #ifdef WX
 193   2            if(++slave_nearby_count > 3)
 194   2               {
 195   3               slave_nearby_count = 5;
 196   3               slave_nearby_actioned_flag = 0;
 197   3               IDkey_flag = 0;
 198   3               enable_sensor();
 199   3               }
 200   2            #endif
 201   2            
 202   2            #ifdef Z3
 203   2            Fell_Alarm_to_Slave();
 204   2            Raise_Alarm_to_Slave();
 205   2            Batstolen_Alarm_to_Slave();
 206   2            #endif      
 207   2            }  
 208   1      
 209   1         IDcerted_speech();
 210   1         
 211   1         if(never_alarm_speech == 1)
 212   1            {
 213   2            never_alarm_speech = 0;
 214   2            Self_learn_speech();             
 215   2            }
 216   1      
 217   1         if(key_rotate == 1)
 218   1            {
 219   2            if(wire_broken == 1)
 220   2               {
 221   3               IDkey_selflearn_LVcount = 0;
 222   3                        
 223   3               if(++IDkey_selflearn_HVcount > 4000)
 224   3                  {
 225   4                  IDkey_selflearn_HVcount = 4002;
 226   4                  IDkey_selflearn_flag1 = 0;
 227   4                  IDkey_selflearn_flag2 = 0;
 228   4                  IDkey_selflearn_flag3 = 0;
 229   4                  IDkey_selflearn_flag4 = 0;
 230   4                  IDkey_selflearn_flag5 = 0;
 231   4                  }
 232   3               else
 233   3                  {
 234   4                  IDkey_selflearn_flag1 = 1;
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 5   

 235   4                  if(IDkey_selflearn_flag2 == 1)
 236   4                     IDkey_selflearn_flag3 = 1;
 237   4                  if(IDkey_selflearn_flag4 == 1)
 238   4                     IDkey_selflearn_flag5 = 1;
 239   4                  }
 240   3               }
 241   2            else
 242   2               {
 243   3               IDkey_selflearn_HVcount = 0;
 244   3               
 245   3               if(IDkey_selflearn_flag1 == 1)
 246   3                  IDkey_selflearn_flag2 = 1;
 247   3                  
 248   3               if(IDkey_selflearn_flag3 == 1)
 249   3                  IDkey_selflearn_flag4 = 1;
 250   3               
 251   3               if(IDkey_selflearn_flag5 == 1)
 252   3                  {
 253   4                  IDkey_selflearn_flag6 = 1;
 254   4                  IDkey_flash_EN = 1;
 255   4                  }
 256   3                  
 257   3               if(++IDkey_selflearn_LVcount > 4000)
 258   3                  {
 259   4                  IDkey_selflearn_LVcount = 4002;
 260   4                  IDkey_selflearn_flag1 = 0;
 261   4                  IDkey_selflearn_flag2 = 0;
 262   4                  IDkey_selflearn_flag3 = 0;
 263   4                  IDkey_selflearn_flag4 = 0;
 264   4                  IDkey_selflearn_flag5 = 0;
 265   4                  IDkey_selflearn_flag6 = 0;
 266   4                  }
 267   3               }     
 268   2            }
 269   1      
 270   1         if(IDkey_flash_EN == 1)
 271   1            {
 272   2            IDkey_flash_EN = 0;
 273   2            flashing_flag = 1;
 274   2            IDkey_selflearn_flag1 = 0;
 275   2            IDkey_selflearn_flag2 = 0;
 276   2            IDkey_selflearn_flag3 = 0;
 277   2            IDkey_selflearn_flag4 = 0;
 278   2            IDkey_selflearn_flag5 = 0;
 279   2            IDkey_selflearn_flag6 = 0;
 280   2            #ifdef ID
                    SCH_Add_Task(Self_learn_programming, 0, 0);
                    #endif
 283   2            Self_learn_speech();
 284   2            UART_Send_Data_match();
 285   2            }
 286   1         
 287   1         // detect whether key is rotated on,  
 288   1         if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1)&&(never_alarm == 0))     
 289   1            {
 290   2            disable_sensor();
 291   2            
 292   2            ID_speeched_flag = 0;
 293   2            
 294   2            IDkey_count = 0;
 295   2            IDkey_flag = 0;
 296   2            IDkey_certificated_times = 0;
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 6   

 297   2            slave_nearby_actioned_flag = 1;
 298   2            ElecMotor_CW();
 299   2            slave_nearby_operation();
 300   2            }     
 301   1                  
 302   1         // detect whether key is rotated off
 303   1         if(((key_rotate == 0)||(slave_nearby_actioned_flag == 0))&&(key_rotated_on_flag == 1))
 304   1            {
 305   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 306   2               {
 307   3               Delay_1ms();
 308   3               if((key_rotate == 0)||(slave_nearby_actioned_flag == 0))
 309   3                  {
 310   4                  key_rotated_on_flag=0;
 311   4                  slave_away_operation();    
 312   4                  IDkey_speech_flash = 0;
 313   4                  ID_speeched_flag = 0;
 314   4                  }           
 315   3               }
 316   2            }
 317   1            
 318   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 319   1            {
 320   2            vibration_flag = 1;
 321   2            vibration_count = 0;
 322   2            }
 323   1          if(vibration_flag == 1)
 324   1            {
 325   2            if(++vibration_count >= 2000)
 326   2               {
 327   3               vibration_flag = 0;
 328   3               vibration_count = 0;
 329   3               }
 330   2            }
 331   1      
 332   1         if(wheeled_rotate == 1)
 333   1            {
 334   2            wheeled_flag = 1;
 335   2            wheeled_count = 0;
 336   2            }
 337   1         if(wheeled_flag == 1)
 338   1            {
 339   2            if(++wheeled_count >= 2000)
 340   2               {
 341   3               wheeled_flag = 0;
 342   3               wheeled_count = 0;
 343   3               }
 344   2            }
 345   1               
 346   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 347   1            {
 348   2            vibration_flag = 1;
 349   2            vibration_count = 0;       
 350   2            }     
 351   1      
 352   1      // judge host is fell or raised every 1ms?
 353   1      // if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 354   1      //    {
 355   1            // judge vibration sensor is enable?
 356   1            if(sensor_EN == 1)   
 357   1               {        
 358   2               // sensor trigger status, 0, 1 or 2?
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 7   

 359   2               switch(sensor_trigger_count)
 360   2                  {
 361   3                  // case 0, it means host is in waiting status. waiting for first touch.
 362   3                  case 0:
 363   3                     {              
 364   4                     // judge host been touched and also not in vibration alarm
 365   4      //             if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))      
 366   4                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0)&&(flashing_flag == 0)&&
             -(transmiter_EN == 1))     
 367   4                        {
 368   5                        // judge LV is more than 2ms, if yes, it means a effective touch
 369   5                        if(++sensor_1ststage_count >= 1)       
 370   5                           {
 371   6                           sensor_1ststage_count=0;
 372   6                           
 373   6                           // sensor trigge status progress to case 1.
 374   6                           sensor_trigger_count = 1;
 375   6                           // alarm speech for first touch
 376   6      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 377   6      //                   host_touch_speech();
 378   6                           Delay_500ms();
 379   6                           Delay_500ms();
 380   6                           Delay_500ms();
 381   6                           Delay_500ms();
 382   6                           }
 383   5                        }
 384   4                     else
 385   4                        {
 386   5                        // if no LV, reset the count.
 387   5                        sensor_1ststage_count = 0;
 388   5                        }
 389   4                     }
 390   3                  break;
 391   3                  
 392   3                  // waiting for next touch, 
 393   3                  case 1:
 394   3                     {
 395   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 396   4                        {
 397   5                        // LV for 2s, means a effective touch
 398   5                        if(++sensor_2ndstage_count >= 1)
 399   5                           {
 400   6                           sensor_2ndstage_count = 0;
 401   6                           sensor_trigger_count = 2;
 402   6                           // alarm speech for 2nd touch
 403   6      //                   SCH_Add_Task(host_2ndtouch_speech, 0, 0);
 404   6                           host_touch_speech();
 405   6                           }
 406   5                        }
 407   4                     else
 408   4                        {
 409   5                        sensor_2ndstage_count = 0;
 410   5                        }
 411   4                     
 412   4                     // if there is no touch in 4s, reset sensor trigger status, etc.
 413   4                     if(++sensor_2ndstage_time >= 4000)
 414   4                        {
 415   5                        sensor_trigger_count = 0;
 416   5                        sensor_2ndstage_count = 0;
 417   5                        sensor_1ststage_count = 0;
 418   5                        sensor_2ndstage_time = 0;
 419   5                        }
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 8   

 420   4                     }
 421   3                  break;
 422   3                  
 423   3                  // waiting for 3rd touch
 424   3                  case 2:
 425   3                     {
 426   4                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 427   4                        {
 428   5                        // 2s LV is a effective touch
 429   5                        if(++sensor_3rdstage_count >= 1)
 430   5                           {
 431   6                           sensor_3rdstage_count = 0;
 432   6                           // stolen alarm speech enable
 433   6                           host_stolen_alarm1_EN = 1;
 434   6                           host_stolen_alarm2_EN = 1; 
 435   6                           sensor_3rdalarm_flag = 1;                    
 436   6                           }
 437   5                        }
 438   4                     else
 439   4                        {
 440   5                        sensor_3rdstage_count = 0;
 441   5                        }
 442   4                     
 443   4                     // if there is no touch in 4s, reset all.
 444   4                     if(++sensor_3rdstage_time >= 4000)
 445   4                        {
 446   5                        sensor_trigger_count = 0;
 447   5                        sensor_1ststage_count = 0;
 448   5                        sensor_2ndstage_count = 0;
 449   5                        sensor_2ndstage_time = 0;
 450   5                        sensor_3rdstage_time = 0;
 451   5                        sensor_3rdstage_interval = 800;
 452   5                        sensor_3rdstage_count = 0;
 453   5                        sensor_3rdstage_effcount = 0;             
 454   5                        }
 455   4                     }
 456   3                  break;
 457   3                  }
 458   2               
 459   2               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 460   2               if((wire_broken == 0) && (wire_broken_count < 51))  
 461   2                  {
 462   3                  if(++wire_broken_count > 50)
 463   3                     {
 464   4                     host_stolen_alarm1_EN = 1;
 465   4                     host_stolen_alarm2_EN = 1; 
 466   4                     wire_broken_count = 51;
 467   4                     wire_broken_flag = 1;
 468   4                     }  
 469   3                  }
 470   2               else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 471   2                  {
 472   3                  wire_broken_count = 0;
 473   3                  host_stolen_alarm1_EN = 0;
 474   3                  host_stolen_alarm2_EN = 0;
 475   3                  }
 476   2               
 477   2               if(ADC_check_result < 0x100)
 478   2                  {
 479   3                  battery_stolen_EN = 1;
 480   3                  }
 481   2               else
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 9   

 482   2                  battery_stolen_EN = 0;
 483   2               }
 484   1      //    }
 485   1         
 486   1         // judge whether position sensor is enable
 487   1         if(position_sensor_EN==1)     
 488   1            {
 489   2            // judge whether there is a LV
 490   2            if(raised_sensor_detect == 0) 
 491   2               {
 492   3               // LV > 0.5s means a effective input
 493   3               if(++raise_wire_time==10)
 494   3                  {
 495   4                  // flag raised, and reset fell
 496   4                  raised_flag=1;
 497   4                  fell_flag=0;
 498   4                  // judge whether there once been a raised or fell.
 499   4                  if(raised_fell_once_flag == 0)
 500   4                     {
 501   5                     // if no, flag raised and fell flag
 502   5                     raised_fell_flag = 1;               
 503   5                     }
 504   4                  }     
 505   3               }
 506   2            else
 507   2               {
 508   3               raised_flag=0;
 509   3               raised_alarm_count=0;
 510   3               raise_wire_time=0;
 511   3               raised_fell_flag = 0;
 512   3               }
 513   2            // judge whether there is a LV
 514   2            if(fell_sensor_detect==0)
 515   2               {
 516   3               // LV > 0.5s means a effective input
 517   3               if(++fell_wire_time==10)   
 518   3                  {
 519   4                  // flag fell, and reset raised
 520   4                  fell_flag=1;         
 521   4                  raised_flag=0;
 522   4                  // judge whether there once been a raised or fell
 523   4                  if(raised_fell_once_flag == 0)
 524   4                     {
 525   5                     raised_fell_flag = 1;               
 526   5                     }
 527   4                  }     
 528   3               }
 529   2            else
 530   2               {
 531   3               fell_flag=0;
 532   3               fell_alarm_count=0;
 533   3               fell_wire_time=0;
 534   3               raised_fell_flag = 0;
 535   3               }
 536   2            }
 537   1         
 538   1         // judge whether raised or fell, if yes, reset all after 10s.
 539   1         if(raised_fell_flag == 1)
 540   1            {
 541   2            if(++raised_fell_number >= 4000)
 542   2               {
 543   3               raised_fell_flag = 0;
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 10  

 544   3               raised_fell_number = 0;
 545   3               raised_fell_once_flag = 1;
 546   3               
 547   3               sensor_trigger_count = 0;
 548   3               sensor_1ststage_count = 0;
 549   3               sensor_2ndstage_count = 0;
 550   3               sensor_2ndstage_time = 0;
 551   3               sensor_3rdstage_time = 0;
 552   3               sensor_3rdstage_interval = 800;
 553   3               sensor_3rdstage_count = 0;
 554   3               sensor_3rdstage_effcount = 0;             
 555   3               }
 556   2            }
 557   1         
 558   1         // detect the horizontal sensor
 559   1         if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 560   1            {
 561   2            Delay(3);
 562   2            if((horizontal_sensor == 0)||(sensor_detect == 0))
 563   2               {
 564   3               horizontal_vibration = 1;
 565   3               horizontal_vibration_count = 0;
 566   3               }
 567   2            }
 568   1         if(++horizontal_vibration_count >= 5000)
 569   1            {
 570   2            horizontal_vibration_count = 5001;
 571   2            horizontal_vibration = 0;
 572   2            }
 573   1         }
 574          
 575          /*-----------------------------------------------
 576             UART interrupt
 577          -----------------------------------------------*/
 578          void uart_isr() interrupt 4 
 579             {
 580   1         if(RI)
 581   1            {
 582   2            RI=0;
 583   2            received_data_buffer[data_count] = SBUF;
 584   2      
 585   2            // assign one byte to buffer[i] 
 586   2            
 587   2            if(IDkey_selflearn_flag6 == 0)
 588   2               {
 589   3               // judge whether buffer[0] is CmdHead
 590   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 591   3                  {
 592   4                  data_count = 1;
 593   4                  }
 594   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 595   3                  {
 596   4                  data_count = 2;
 597   4                  }
 598   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 599   3                  {
 600   4                  data_count = 3;
 601   4                  }
 602   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 603   3                  {
 604   4                  data_count = 4;
 605   4                  }
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 11  

 606   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 607   3                  {
 608   4                  data_count = 5;
 609   4                  }
 610   3               #ifdef ID
                       else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
                          {
                          data_count = 0;   
                          IDkey_flag = 1;
                          IDkey_count = 0;
                          disable_sensor();
                          IDkey_speech_flash = 1;
                          
                          if(IDkey_certificated_times++ >= 1)
                             {
                             Silence_Flag = 1;
                             }
                          if(++IDkey_certificated_times >= 11)
                             {
                             never_alarm = 1;
                             never_alarm_speech = 1;
                             Silence_Flag = 0;
                             IDkey_certificated_times = 0;
                             }
                          }
                       #endif
 632   3               #ifdef WX
 633   3               else if(data_count == 5)
 634   3                  {
 635   4                  receive_data_finished_flag = 1;
 636   4                  data_count = 0;
 637   4                  }        
 638   3               #endif
 639   3               else 
 640   3                  {
 641   4                  data_count = 0;
 642   4                  }  
 643   3      
 644   3               #ifdef WX
 645   3               if(receive_data_finished_flag == 1)
 646   3                  {
 647   4                  receive_data_finished_flag  = 0;
 648   4                  switch(received_data_buffer[5])
 649   4                     {
 650   5                     case ComMode_1:
 651   5                        {
 652   6                        IDkey_flag = 1;
 653   6                        IDkey_count = 0;
 654   6                        disable_sensor();
 655   6                        IDkey_speech_flash = 1;
 656   6                        slave_nearby_count = 0;
 657   6                        }
 658   5                     }
 659   4                  }
 660   3               #endif
 661   3               }
 662   2            else
 663   2               {        
 664   3               #ifdef ID
                       if(++data_count >= 6)
                          {
                          data_count = 0;
C51 COMPILER V9.51   MAIN                                                                  05/08/2015 16:10:57 PAGE 12  

                          IDkey_flash_EN = 1;
                          }
                       #endif
 671   3               }
 672   2            }
 673   1         }
 674          
 675          
 676          /*---------------------------------------------------
 677             end of file
 678          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1296    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     56    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     33    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
